=pod

=head1 NAME

SSL_shutdown - shut down a TLS/SSL or QUIC connection

=head1 SYNOPSIS

 #include <openssl/ssl.h>

 int SSL_shutdown(SSL *ssl);

=head1 DESCRIPTION

SSL_shutdown() shuts down an active connection represented by an SSL object.

While the general operation of SSL_shutdown() is common between protocols, the
exact nature of how a shutdown is performed depends on the underlying protocol
being used. See the section below pertaining to each protocol for more
information.

In general, calling SSL_shutdown() in nonblocking mode will initiate the
shutdown process and return 0 to indicate that the shutdown process has not yet
completed. Once the shutdown process has completed, subsequent calls to
SSL_shutdown() will return 1. See the RETURN VALUES section for more
information.

SSL_shutdown() should not be called if a previous fatal error has occurred on a
connection; i.e., if L<SSL_get_error(3)> has returned B<SSL_ERROR_SYSCALL> or
B<SSL_ERROR_SSL>.

=head1 TLS AND DTLS-SPECIFIC CONSIDERATIONS

Shutdown for SSL/TLS and DTLS is implemented in terms of the SSL/TLS/DTLS
close_notify alert message. The shutdown process for SSL/TLS and DTLS
consists of two steps:

=over 4

=item *

A close_notify shutdown alert message is sent to the peer.

=item *

A close_notify shutdown alert message is received from the peer.

=back

These steps can occur in either order depending on whether the connection
shutdown process was first initiated by the local application or by the peer.

=head2 Locally-Initiated Shutdown

Calling SSL_shutdown() on a SSL/TLS or DTLS SSL object initiates the shutdown
process and causes OpenSSL to try to send a close_notify shutdown alert to the
peer. The shutdown process will then be considered completed once the peer
responds in turn with a close_notify shutdown alert message.

Calling SSL_shutdown() only closes the write direction of the connection; the
read direction is closed by the peer. Once SSL_shutdown() is called,
L<SSL_write(3)> can no longer be used, but L<SSL_read(3)> may still be used
until the peer decides to close the connection in turn. The peer might
continue sending data for some period of time before handling the local
application's shutdown indication.

SSL_shutdown() does not affect an underlying network connection such as a TCP
connection, which remains open.

=head2 Remotely-Initiated Shutdown

If the peer was the first to initiate the shutdown process by sending a
close_notify alert message, an application will be notified of this as an EOF
condition when calling
L<SSL_read(3)> (i.e., L<SSL_read(3)> will fail and L<SSL_get_error(3)> will
return B<SSL_ERROR_ZERO_RETURN>), after all application data sent by the peer
prior to initiating the shutdown has been read. An application should handle
this condition by calling SSL_shutdown() to respond with a close_notify alert in
turn, completing the shutdown process, though it may choose to write additional
application data using L<SSL_write(3)> before doing so. If an application does
not call SSL_shutdown() in this case, a close_notify alert will not be sent and
the behaviour will not be fully standards compliant.

=head2 Shutdown Lifecycle

Regardless of whether a shutdown was initiated locally or by the peer, if the
underlying BIO is blocking, a call to SSL_shutdown() will return firstly once a
close_notify alert message is written to the peer (returning 0), and upon a
second and subsequent call, once a corresponding message is received from the
peer (returning 1 and completing the shutdown process). Calls to SSL_shutdown()
with a blocking underlying BIO will also return if an error occurs.

If the underlying BIO is nonblocking and the shutdown process is not yet
complete (for example, because a close_notify alert message has not yet been
received from the peer, or because a close_notify alert message needs to be sent
but would currently block), SSL_shutdown() returns 0 to indicate that the
shutdown process is still ongoing; in this case, a call to L<SSL_get_error(3)>
will yield B<SSL_ERROR_WANT_READ> or B<SSL_ERROR_WANT_WRITE>.

An application can then detect completion of the shutdown process by calling
SSL_shutdown() again repeatedly until it returns 1, indicating that the shutdown
process is complete (with a close_notify alert having both been sent and
received).

However, the preferred method of waiting for the shutdown to complete is to use
L<SSL_read(3)> until L<SSL_get_error(3)> indicates EOF by returning
B<SSL_ERROR_ZERO_RETURN>. This ensures any data received immediately before the
peer's close_notify alert is still provided to the application. It also ensures
any final handshake-layer messages received are processed (for example, messages
issuing new session tickets).

If this approach is not used, the second call to SSL_shutdown() (to complete the
shutdown by confirming receipt of the peer's close_notify message) will fail if
it is called when the application has not read all pending application data
sent by the peer using L<SSL_read(3)>.

When calling SSL_shutdown(), the B<SSL_SENT_SHUTDOWN> flag is set once an
attempt is made to send a close_notify alert, regardless of whether the attempt
was successful. The B<SSL_RECEIVED_SHUTDOWN> flag is set once a close_notify
alert is received, which may occur during any call which processes incoming data
from the network, such as L<SSL_read(3)> or SSL_shutdown(). These flags
may be checked using L<SSL_get_shutdown(3)>.

=head2 Fast Shutdown

Alternatively, it is acceptable for an application to call SSL_shutdown() once
(such that it returns 0) and then close the underlying connection without
waiting for the peer's response. This allows for a more rapid shutdown process
if the application does not wish to wait for the peer.

This alternative "fast shutdown" approach should only be done if it is known
that the peer will not send more data, otherwise there is a risk of an
application exposing itself to a truncation attack. The full SSL_shutdown()
process, in which both parties send close_notify alerts and SSL_shutdown()
returns 1, provides a cryptographically authenticated indication of the end of a
connection.

This approach of a single SSL_shutdown() call without waiting is preferable to
simply calling L<SSL_free(3)> or L<SSL_clear(3)> as calling SSL_shutdown()
beforehand makes an SSL session eligible for subsequent reuse and notifies the
peer of connection shutdown.

The fast shutdown approach can only be used if there is no intention to reuse
the underlying connection (e.g. a TCP connection) for further communication; in
this case, the full shutdown process must be performed to ensure
synchronisation.

=head2 Effects on Session Reuse

Calling SSL_shutdown() sets the SSL_SENT_SHUTDOWN flag (see
L<SSL_set_shutdown(3)>), regardless of whether the transmission of the
close_notify alert was successful or not. This makes the SSL session eligible
for reuse; the SSL session is considered properly closed and can be reused for
future connections.

=head2 Quiet Shutdown

SSL_shutdown() can be modified to set the connection to the "shutdown"
state without actually sending a close_notify alert message; see
L<SSL_CTX_set_quiet_shutdown(3)>. When "quiet shutdown" is enabled,
SSL_shutdown() will always succeed and return 1 immediately.

This is not standards-compliant behaviour. It should only be done when the
application protocol in use enables the peer to ensure that all data has been
received, such that it doesn't need to wait for a close_notify alert, otherwise
application data may be truncated unexpectedly.

=head2 Non-Compliant Peers

There are SSL/TLS implementations that never send the required close_notify
alert message but simply close the underlying transport (e.g. a TCP connection)
instead. This will ordinarily result in an error being generated.

If compatibility with such peers is desired, the option
B<SSL_OP_IGNORE_UNEXPECTED_EOF> can be set. For more information, see
L<SSL_CTX_set_options(3)>.

Note that use of this option means that the EOF condition for application data
does not receive cryptographic protection, and therefore renders an application
potentially vulnerable to truncation attacks. Thus, this option must only be
used in conjunction with an application protocol which indicates unambiguously
when all data has been received.

An alternative approach is to simply avoid calling L<SSL_read(3)> if it is known
that no more data is going to be sent. This requires an application protocol
which indicates unambiguously when all data has been sent.

=head2 Session Ticket Handling

If a client application only writes to a SSL/TLS or DTLS connection and never
reads, OpenSSL may never process new SSL/TLS session tickets sent by the server.
This is because OpenSSL ordinarily processes handshake messages received from a
peer during calls to L<SSL_read(3)> by the application.

Therefore, client applications which only write and do not read but which wish
to benefit from session resumption are advised to perform a complete shutdown
procedure by calling SSL_shutdown() until it returns 1, as described above. This
will ensure there is an opportunity for SSL/TLS session ticket messages to be
received and processed by OpenSSL.

=head1 RETURN VALUES

The following return values can occur:

=over 4

=item Z<>0

The shutdown process is ongoing and has not yet completed.

For TLS and DTLS, this means that a close_notify alert has been sent but the
peer has not yet replied in turn with its own close_notify.

For QUIC connection SSL objects, a CONNECTION_CLOSE frame may have been
sent but the connection closure process has not yet completed.

Unlike most other functions, returning 0 does not indicate an error.
L<SSL_get_error(3)> should not be called; it may misleadingly indicate an error
even though no error occurred.

=item Z<>1

The shutdown was successfully completed.

For TLS and DTLS, this means that a close_notify alert was sent and the peer's
close_notify alert was received.

For QUIC connection SSL objects, this means that the connection closure process
has completed.

=item E<lt>0

The shutdown was not successful.
Call L<SSL_get_error(3)> with the return value B<ret> to find out the reason.
It can occur if an action is needed to continue the operation for nonblocking
BIOs.

It can also occur when not all data was read using SSL_read(), or if called
on a QUIC stream SSL object.

This value is also returned when called on QUIC stream SSL objects.

=back

=head1 SEE ALSO

L<SSL_get_error(3)>, L<SSL_connect(3)>,
L<SSL_accept(3)>, L<SSL_set_shutdown(3)>,
L<SSL_CTX_set_quiet_shutdown(3)>, L<SSL_CTX_set_options(3)>
L<SSL_clear(3)>, L<SSL_free(3)>,
L<ssl(7)>, L<bio(7)>

=head1 COPYRIGHT

Copyright 2000-2023 The OpenSSL Project Authors. All Rights Reserved.

Licensed under the Apache License 2.0 (the "License").  You may not use
this file except in compliance with the License.  You can obtain a copy
in the file LICENSE in the source distribution or at
L<https://www.openssl.org/source/license.html>.

=cut
