#! /usr/bin/env perl
# Copyright 1995-2023 The OpenSSL Project Authors. All Rights Reserved.
# Copyright 2025 The QuicTLS Project Authors. All Rights Reserved.
#
# Licensed under the Apache License 2.0 (the "License").  You may not use
# this file except in compliance with the License.  You can obtain a copy
# in the file LICENSE in the source distribution or at
# https://www.openssl.org/source/license.html

# Generate progs.h file by looking for command mains in list of C files
# passed on the command line.

use strict;
use warnings;

# Should use getopt, oh well
my $opt = shift @ARGV;
die "Unrecognised option, must be -C or -H\n"
    unless $opt eq '-H' || $opt eq '-C';
my $out = shift @ARGV;
open (my $FH, '>', $out) or die "Can't open $out, $!";
select $FH;
my ${DIR} = shift @ARGV;

# Scan the source files, looking for xxxx_main
my %commands     = ();
my $cmdre        = qr/^\s*int\s+([a-z_][a-z0-9_]*)_main\(/;
foreach my $base ( @ARGV ) {
    my $f = "${DIR}/${base}";
    open F, $f or die "Couldn't open $f, $!";
    foreach ( grep /$cmdre/, <F> ) {
        my @foo = /$cmdre/;
        $commands{$1} = 1;
    }
    close F;
}
my @names = sort keys %commands;

my %ifdeflist = (
    # Digests
    "des" => 1,
    "idea" => 1,
    "md2" => 1,
    "md4" => 1,
    "mdc2" => 1,
    "rmd160" => 1,
    "blake2" => 1,
    "sm3" => 1,
    # Ciphers
    "aria" => 1,
    "bf" => 1,
    "camellia" => 1,
    "cast" => 1,
    "rc2" => 1,
    "rc4" => 1,
    "rc5" => 1,
    "seed" => 1,
    "sm4" => 1,
    # Other ciphers
    "brotli" => 1,
    "zlib" => 1,
    "zstd" => 1,
);
my %truename = (
    "blake2b512" => "blake2",
    "blake2s256" => "blake2",
    "des3" => "des",
    "desx" => "des",
    "cast5" => "cast",
);

print <<"EOF";
/*
 * WARNING: do not edit!
 * Generated by apps/progs.pl
 */
EOF

if ($opt eq '-H') {
    printf "#ifndef OPENSSL_PROGS_H\n";
    printf "# define OPENSSL_PROGS_H\n";
    printf "\n";
    printf "#include <apps/function.h>\n";
    foreach ( @names ) {
        printf "extern int %s_main(int argc, char *argv[]);\n", $_;
    }
    print "\n";
    foreach ( @names ) {
        printf "extern const OPTIONS %s_options[];\n", $_;
    }
    print "\n";
    print "extern FUNCTION functions[];\n";
    print "#endif\n"
} else {
    print <<"EOF";

#include <apps/progs.h>

EOF

    print "FUNCTION functions[] = {\n";
    # Print the main command table entries.
    foreach my $cmd ( @names ) {
        print "    { FT_general, \"$cmd\", ${cmd}_main, ${cmd}_options },\n";
    }

    # Print the "digest" commands.
    foreach my $cmd (
        "blake2b512", "blake2s256",
        "md2", "md4", "md5", "mdc2", "rmd160",
        "sha1", "sha224", "sha256", "sha384", "sha512", "sha512-224",
        "sha512-256", "sha3-224", "sha3-256", "sha3-384", "sha3-512",
        "shake128", "shake256",
        "sm3"
    ) {
        my $str = "    { FT_md, \"$cmd\", dgst_main },\n";
        # Get the basename (sha3 for sha3-224) and see if there's an ifdef
        (my $algo = $cmd) =~ s/-.*//g;
        if (defined $ifdeflist{$algo}) {
            print "#ifndef OPENSSL_NO_" . uc($algo) . "\n${str}#endif\n";
        } elsif (my $alias = $truename{$algo}) {
            print "#ifndef OPENSSL_NO_" . uc($alias) . "\n${str}#endif\n";
        } else {
            print ${str};
        }
    }

    # Print the "encryption" commands.
    foreach my $cmd (
        "base64",
        "brotli", "zlib", "zstd",
        "aes-128-cbc", "aes-128-ecb", "aes-192-cbc", "aes-192-ecb",
        "aes-256-cbc", "aes-256-ecb",
        "aria-128-cbc", "aria-128-cfb", "aria-128-cfb1", "aria-128-cfb8",
        "aria-128-ctr", "aria-128-ecb", "aria-128-ofb", "aria-192-cbc",
        "aria-192-cfb", "aria-192-cfb1", "aria-192-cfb8", "aria-192-ctr",
        "aria-192-ecb", "aria-192-ofb", "aria-256-cbc", "aria-256-cfb",
        "aria-256-cfb1", "aria-256-cfb8", "aria-256-ctr", "aria-256-ecb",
        "aria-256-ofb",
        "bf", "bf-cbc", "bf-cfb", "bf-ecb", "bf-ofb",
        "camellia-128-cbc", "camellia-128-ecb", "camellia-192-cbc",
        "camellia-192-ecb", "camellia-256-cbc", "camellia-256-ecb",
        "cast", "cast5-cbc", "cast5-cfb", "cast5-ecb", "cast5-ofb", "cast-cbc",
        "des", "des3", "des-cbc", "des-cfb", "des-ecb", "des-ede",
        "des-ede3", "des-ede3-cbc", "des-ede3-cfb", "des-ede3-ofb",
        "des-ede-cbc", "des-ede-cfb", "des-ede-ofb", "des-ofb", "desx",
        "idea", "idea-cbc", "idea-cfb", "idea-ecb", "idea-ofb",
        "rc2", "rc2-40-cbc", "rc2-64-cbc", "rc2-cbc", "rc2-cfb",
        "rc2-ecb", "rc2-ofb",
        "rc4", "rc4-40",
        "rc5", "rc5-cbc", "rc5-cfb", "rc5-ecb", "rc5-ofb",
        "seed", "seed-cbc", "seed-cfb", "seed-ecb", "seed-ofb",
        "sm4-cbc", "sm4-cfb", "sm4-ctr", "sm4-ecb", "sm4-ofb",
    ) {
        my $str = "    { FT_cipher, \"$cmd\", enc_main, enc_options },\n";
        (my $algo = $cmd) =~ s/-.*//g;
        if (defined $ifdeflist{$algo}) {
            print "#ifndef OPENSSL_NO_" . uc($algo) . "\n${str}#endif\n";
        } elsif (my $alias = $truename{$algo}) {
            print "#ifndef OPENSSL_NO_" . uc($alias) . "\n${str}#endif\n";
        } else {
            print ${str};
        }
    }

    print "    { 0 }\n};\n";
}

select STDOUT;
close $FH;
